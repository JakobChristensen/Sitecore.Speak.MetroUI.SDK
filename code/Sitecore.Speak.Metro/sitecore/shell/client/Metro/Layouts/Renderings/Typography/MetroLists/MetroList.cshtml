@using Sitecore
@using Sitecore.Bootstrap
@using Sitecore.Data
@using Sitecore.Data.Items
@using Sitecore.Diagnostics
@using Sitecore.Mvc.Presentation
@using Sitecore.Text
@model Sitecore.Shell.Client.Metro.Layouts.Renderings.Typography.MetroLists.MetroListRenderingModel
@{
  Model.Presenter = Presenters.Knockout;

  var parameters = new UrlString(Model.Rendering.RenderingItem.InnerItem["Parameters"]);
  var tag = parameters["Tag"];

  Model.Class = parameters["Class"] ?? string.Empty;

  var maxDepth = Model.MaxDepth;

  var startTag = "<" + tag + " " + Model.HtmlAttributes + ">";
  var endTag = "</" + tag + ">";

  var items = BootstrapApplication.GetMenuItems(Model, Model.ItemsDataSource, Model.ControlId);
}              
@Html.Raw(startTag)
@Html.Raw(RenderItems(tag, items, Model.DisplayFieldName, maxDepth, 0))
@Html.Raw(endTag) 
@functions {
  [NotNull]
  private string RenderItems([NotNull] string tag, [NotNull] IEnumerable<Item> children, [NotNull] string displayFieldName, int maxDepth, int depth)
  {
    Debug.ArgumentNotNull(displayFieldName, "displayFieldName");
    Debug.ArgumentNotNull(children, "children");
    Debug.ArgumentNotNull(tag, "tag");

    var result = string.Empty;

    foreach (var item in children)
    {
      if (string.Compare(item.Name, "PageSettings", StringComparison.InvariantCultureIgnoreCase) == 0)
      {
        continue;
      }

      var displayName = item.GetField(displayFieldName, item.DisplayName);
      result += "<li>";
      result += displayName;

      if (item.HasChildren && (maxDepth <= 0 || depth < maxDepth - 1))
      {
        var startTag = "<" + tag + ">";
        var endTag = "</" + tag + ">";

        result += startTag;
        result += RenderItems(tag, item.Children, displayFieldName, maxDepth, depth + 1);
        result += endTag;
      }
      result += "</li>";
    }

    return result;
  }
}
